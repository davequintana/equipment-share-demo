services:
  # Frontend
  web-app:
    build:
      context: .
      dockerfile: apps/web-app/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - fastify-api
    environment:
      - NODE_ENV=production

  # Fastify API
  fastify-api:
    build:
      context: .
      dockerfile: apps/fastify-api/Dockerfile
    ports:
      - "3334:3334"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://enterprise:password@postgres:5432/enterprise_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - KAFKA_BROKERS=kafka:9092
    restart: unless-stopped

  # PostgreSQL Database - Enterprise Configuration
  postgres:
    image: postgres:16.2
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: enterprise_db
      POSTGRES_USER: enterprise
      POSTGRES_PASSWORD: enterprise_secure_password
      # Enterprise-level configuration with SCRAM authentication
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256 --auth-local=scram-sha-256'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount enterprise configuration files
      - ./infrastructure/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./infrastructure/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./infrastructure/postgres/enterprise-config.sql:/docker-entrypoint-initdb.d/01-enterprise-config.sql:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c shared_preload_libraries=pg_stat_statements,auto_explain
      -c log_statement=mod
      -c log_min_duration_statement=5000
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
      -c log_checkpoints=on
      -c log_temp_files=0
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U enterprise -d enterprise_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network
    labels:
      app.type: "database"
      app.env: "development"
      security.level: "enterprise"
      backup.required: "true"
      monitoring.enabled: "true"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped

  # Kafka UI (optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    restart: unless-stopped

  # pgAdmin (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "8081:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@enterprise.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  app-network:
    driver: bridge
    name: enterprise-network
