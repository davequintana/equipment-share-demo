name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  PNPM_VERSION: 9.15.3
  NODE_VERSION: '23.6.0'

jobs:
  # All independent jobs run in parallel - no cross-dependencies
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Derive appropriate SHAs for base and head
        uses: nrwl/nx-set-shas@v4

      - name: Lint affected projects
        run: pnpm exec nx affected -t lint --parallel=4

      - name: Type check affected projects
        run: pnpm exec nx affected -t type-check --parallel=4

      - name: Security lint
        run: pnpm run lint:security

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Derive appropriate SHAs for base and head
        uses: nrwl/nx-set-shas@v4

      - name: Test affected projects
        run: pnpm exec nx affected -t test --parallel=3 --coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          NODE_ENV: test

      - name: Check coverage reports
        run: |
          echo "Checking for coverage reports..."
          find . -name "coverage" -type d | head -10
          echo "Coverage files found:"
          find . -name "*.json" -path "*/coverage/*" | head -10
          echo "Contents of ./coverage directory:"
          ls -la ./coverage/ || echo "No ./coverage directory found"
          if [ -d "./coverage" ]; then
            find ./coverage -name "*.json" | head -5
          fi

      - name: Consolidate coverage reports
        run: |
          echo "Consolidating coverage reports..."
          mkdir -p coverage

          # Copy coverage from apps projects
          if [ -d "apps/fastify-api/coverage" ]; then
            echo "Copying fastify-api coverage..."
            mkdir -p coverage/apps/fastify-api
            cp -r apps/fastify-api/coverage/* coverage/apps/fastify-api/
          fi

          if [ -d "apps/web-app/coverage" ]; then
            echo "Copying web-app coverage..."
            mkdir -p coverage/apps/web-app
            cp -r apps/web-app/coverage/* coverage/apps/web-app/
          fi

          # Copy any coverage files from the expected NX output location
          if [ -d "coverage/apps" ] && [ "$(find coverage/apps -name '*.json' | wc -l)" -gt 0 ]; then
            echo "Found existing coverage in NX output location"
          fi

          echo "Final coverage structure:"
          find coverage -name "*.json" 2>/dev/null | head -10 || echo "No coverage JSON files found"

          # For debugging: show total coverage files found
          echo "Total JSON coverage files: $(find coverage -name "*.json" 2>/dev/null | wc -l)"

      - name: Upload test coverage
        uses: codecov/codecov-action@v5
        with:
          directory: coverage
          fail_ci_if_error: false
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        project: [web-app, fastify-api]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Derive appropriate SHAs for base and head
        uses: nrwl/nx-set-shas@v4

      - name: Build ${{ matrix.project }}
        run: pnpm exec nx build ${{ matrix.project }} --prod

      - name: Fix build output location (workaround for NX path resolution issue)
        run: |
          # The NX Vite executor has a path resolution bug where it builds to the wrong location
          # Check for build output in common incorrect locations and move to correct location
          echo "=== Checking for build artifacts in incorrect locations ==="

          # Most likely location: GitHub Actions runner home directory
          if [ -d "/home/runner/dist/apps/${{ matrix.project }}" ]; then
            echo "✅ Found build in /home/runner/dist/apps/${{ matrix.project }}"
            mkdir -p dist/apps/
            mv "/home/runner/dist/apps/${{ matrix.project }}" "dist/apps/"
            echo "✅ Moved to dist/apps/${{ matrix.project }}"

          # Doubled path scenario (common with NX path resolution bug)
          elif [ -d "/home/runner/home/runner/work/equipment-share-demo/equipment-share-demo/dist/apps/${{ matrix.project }}" ]; then
            echo "✅ Found build in doubled path location"
            mkdir -p dist/apps/
            mv "/home/runner/home/runner/work/equipment-share-demo/equipment-share-demo/dist/apps/${{ matrix.project }}" "dist/apps/"
            echo "✅ Moved to dist/apps/${{ matrix.project }}"

          # Parent directory
          elif [ -d "../dist/apps/${{ matrix.project }}" ]; then
            echo "✅ Found build in ../dist/apps/${{ matrix.project }}"
            mkdir -p dist/apps/
            mv "../dist/apps/${{ matrix.project }}" "dist/apps/"
            echo "✅ Moved to dist/apps/${{ matrix.project }}"

          # Check in user home directory (fallback)
          elif [ -d "~/dist/apps/${{ matrix.project }}" ]; then
            echo "✅ Found build in ~/dist/apps/${{ matrix.project }}"
            mkdir -p dist/apps/
            mv "~/dist/apps/${{ matrix.project }}" "dist/apps/"
            echo "✅ Moved to dist/apps/${{ matrix.project }}"

          else
            echo "⚠️  Build artifacts not found in expected incorrect locations"
            echo "Searching for any ${{ matrix.project }} build directories:"
            find /home/runner -type d -name "${{ matrix.project }}" 2>/dev/null | head -10 || echo "No directories found"

            # Try to find any dist directories
            echo "Searching for any dist directories:"
            find /home/runner -type d -name "dist" 2>/dev/null | head -10 || echo "No dist directories found"

            # Last resort: search for build files
            echo "Searching for build files (client.js, server.js):"
            find /home/runner -name "client.js" -o -name "server.js" 2>/dev/null | head -10 || echo "No build files found"
          fi

      - name: Verify build output exists
        run: |
          echo "=== Build verification for ${{ matrix.project }} ==="
          echo "Current directory: $(pwd)"
          echo "Contents of dist/:"
          ls -la dist/ || echo "No dist directory found"
          echo "Contents of dist/apps/:"
          ls -la dist/apps/ || echo "No dist/apps directory found"
          echo "Looking for ${{ matrix.project }} build output:"

          if [ -d "dist/apps/${{ matrix.project }}" ]; then
            echo "✅ Build directory exists: dist/apps/${{ matrix.project }}"
            echo "Contents:"
            ls -la "dist/apps/${{ matrix.project }}"
            echo "File count: $(find dist/apps/${{ matrix.project }} -type f | wc -l)"
          else
            echo "❌ Build directory does not exist: dist/apps/${{ matrix.project }}"
            echo "Available directories in dist/:"
            find dist -type d 2>/dev/null || echo "No directories found in dist/"
            echo "Looking for any ${{ matrix.project }} directories:"
            find . -type d -name "${{ matrix.project }}" 2>/dev/null || echo "No ${{ matrix.project }} directories found anywhere"

            echo "=== Debug: NX build output ==="
            pnpm exec nx show project ${{ matrix.project }} --json | jq -r '.targets.build.outputs[]' || echo "Could not get build outputs"

            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success() && hashFiles('dist/apps/${{ matrix.project }}/**/*') != ''
        with:
          name: build-${{ matrix.project }}
          path: dist/apps/${{ matrix.project }}
          retention-days: 1
          if-no-files-found: error

      - name: Upload build artifacts (fallback)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: debug-${{ matrix.project }}-dist
          path: dist/
          retention-days: 1
          if-no-files-found: ignore

  # Only E2E tests need build artifacts - runs after build completes
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: build-*
          merge-multiple: true
          path: dist/apps/

      - name: Verify downloaded artifacts
        run: |
          echo "=== Downloaded build artifacts ==="
          ls -la dist/apps/ || echo "No dist/apps directory found"
          if [ ! -d "dist/apps" ] || [ -z "$(ls -A dist/apps 2>/dev/null)" ]; then
            echo "⚠️  No build artifacts found - building locally for E2E tests"
            pnpm exec nx build web-app --prod
            pnpm exec nx build fastify-api --prod
          else
            echo "✅ Build artifacts downloaded successfully"
          fi

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Debug environment
        run: |
          echo "Node version: $(node --version)"
          echo "PNPM version: $(pnpm --version)"
          ls -la dist/apps/ || echo "No dist directory"

      - name: Run E2E tests
        run: pnpm exec nx e2e e2e --verbose
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          NODE_ENV: test
          CI: true
          PLAYWRIGHT_WORKERS: 6

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: |
            apps/e2e/playwright-report/
            apps/e2e/test-results/
          retention-days: 30

  # Docker builds run in parallel after build completes
  build-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/fix/deploy'
    strategy:
      matrix:
        app: [web-app, fastify-api]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.app }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./infrastructure/docker/${{ matrix.app }}.Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ matrix.app }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.app }}
          cache-to: type=gha,mode=max,scope=${{ matrix.app }}
          platforms: linux/amd64

  # Security scanning job to match GitHub expectations
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Run dependency security audit
        run: |
          echo "🔍 Running dependency security audit..."

          # Run pnpm audit for security vulnerabilities
          pnpm audit --audit-level moderate || {
            echo "⚠️ Security vulnerabilities found in dependencies"
            echo "Please review and fix the vulnerabilities above"
            exit 1
          }

          echo "✅ No moderate or high severity vulnerabilities found"

  # SonarCloud code analysis
  sonarcloud:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test]
    if: github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Disable shallow clones for better SonarCloud analysis
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Derive appropriate SHAs for base and head
        uses: nrwl/nx-set-shas@v4

      - name: Run tests with coverage for SonarCloud
        run: pnpm exec nx affected -t test --parallel=3 --coverage
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key

      - name: Consolidate coverage for SonarCloud
        run: |
          echo "Consolidating coverage reports for SonarCloud..."
          mkdir -p coverage

          # Copy coverage from individual projects
          for app in apps/*/coverage; do
            if [ -d "$app" ]; then
              app_name=$(basename $(dirname $app))
              echo "Copying coverage from $app_name..."
              mkdir -p "coverage/$app_name"
              cp -r "$app"/* "coverage/$app_name/"
            fi
          done

          # Look for lcov.info files and copy to root coverage
          find . -name "lcov.info" -path "*/coverage/*" -exec cp {} coverage/ \; 2>/dev/null || true

          echo "Coverage files for SonarCloud:"
          find coverage -name "*.info" -o -name "*.xml" | head -10

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=davequintana_equipment-share-demo
            -Dsonar.organization=davequintana
            -Dsonar.projectName="Equipment Share Demo"
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=apps,libs
            -Dsonar.tests=apps,libs
            -Dsonar.test.inclusions="**/*.test.ts,**/*.spec.ts,**/*.test.tsx,**/*.spec.tsx"
            -Dsonar.exclusions="**/node_modules/**,**/dist/**,**/coverage/**,**/*.test.ts,**/*.spec.ts,**/*.test.tsx,**/*.spec.tsx,**/e2e/**,**/playwright.config.ts,**/vite.config.ts,**/vitest.config.ts,**/*.config.js,**/*.config.ts,**/infrastructure/**"
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.typescript.tsconfigPath=tsconfig.base.json
            -Dsonar.qualitygate.wait=true
